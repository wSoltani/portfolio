---
import { SEO } from 'astro-seo';
import { Image } from 'astro:assets';

interface Props {
  title: string;
  description?: string;
}

const { title, description = "Portfolio website for Wassim Soltani, a Full-Stack Software Engineer with over 5 years of experience, specializing in AI/ML Integration and Cloud & Edge Computing." } = Astro.props;
const defaultImage = '/web-app-manifest-512x512.png';
const siteName = "Wassim Soltani";

// Get current path for active page detection
const currentPath = Astro.url.pathname;

// Function to check if a path is active
const isActive = (path: string) => {
  if (path === '/' && currentPath === '/') return true;
  if (path !== '/' && currentPath.startsWith(path)) return true;
  return false;
};

// Navigation items
const navItems = [
  { path: '/', label: 'About', weight: 'normal' },
  { path: '/experience', label: 'Experience', weight: 'normal' },
  { path: '/projects', label: 'Projects', weight: 'normal' },
  { path: '/skills', label: 'Skills', weight: 'normal' },
  { path: '/ai-chat', label: 'AI Chat', weight: 'bold' },
  { path: '/connect', label: 'Connect', weight: 'bold' }
];
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} | Wassim Soltani</title>
    <SEO
      title={title}
      titleTemplate={`%s | ${siteName}`}
      description={description}
      canonical={Astro.url.toString()}
      openGraph={{
        basic: {
          title: `${title} | ${siteName}`,
          type: 'website',
          image: Astro.url.origin + defaultImage,
          url: Astro.url.toString(),
        },
      }}
      twitter={{
        card: 'summary',
      }}
    />
  </head>
  <body class="bg-gray-50 text-gray-900 dark:bg-gray-900 dark:text-gray-100">
    <header class="sticky top-0 z-50 bg-gray-50/80 dark:bg-gray-900/80 backdrop-blur-sm transition-all duration-200" id="header">
      <div class="container mx-auto px-8 sm:px-16 py-2">
        <nav class="flex items-center gap-8">
          <a href="/" class="flex items-center gap-3 group">
            <Image src="/avatar.png" alt="Profile Avatar" width={40} height={40} loading="eager" class="w-10 h-10 rounded-full object-cover border-2 border-blue-500/20 group-hover:border-blue-500/40 transition-colors" />
            <span class="font-semibold text-xl text-gray-800 dark:text-gray-200 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">@wsoltani</span>
          </a>
          
          <!-- Desktop Navigation -->
          <div class="hidden md:flex items-center gap-6 flex-1 justify-end">
            {navItems.map(item => (
              <a 
                href={item.path} 
                class:list={[
                  "transition-colors relative inline-block",
                  item.weight === 'bold' ? "font-semibold" : "font-medium",
                  isActive(item.path) 
                    ? "text-blue-600 dark:text-blue-400 pointer-events-none" 
                    : "text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400"
                ]}
                aria-current={isActive(item.path) ? "page" : undefined}
              >
                {item.label}
                {isActive(item.path) && (
                  <span class="absolute bottom-0 left-0 w-full h-1 bg-blue-500/20 rounded-full"></span>
                )}
              </a>
            ))}
          </div>

          <!-- Mobile menu button -->
          <button id="mobile-menu-button" class="md:hidden ml-auto text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white p-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </nav>

        <!-- Mobile Navigation -->
        <div id="mobile-menu" class="hidden md:hidden mt-3">
          <div class="flex flex-col gap-4 py-2">
            {navItems.map(item => (
              <a 
                href={isActive(item.path) ? '#' : item.path} 
                class:list={[
                  "text-lg transition-colors py-3 px-2 rounded-md",
                  item.weight === 'bold' ? "font-semibold" : "font-medium",
                  isActive(item.path) 
                    ? "text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 pointer-events-none" 
                    : "text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 active:bg-gray-100 dark:active:bg-gray-800"
                ]}
                aria-current={isActive(item.path) ? "page" : undefined}
              >
                {item.label}
              </a>
            ))}
          </div>
        </div>
      </div>
    </header>
    <main>
      <slot />
    </main>
    <footer class="container mx-auto px-4 py-8 mt-16 border-t border-gray-200 dark:border-gray-800">
      <div class="flex justify-between items-center">
        <p class="text-stone-600">&copy; {new Date().getFullYear()} Wassim Soltani</p>
        <div class="flex gap-4">
          <a 
            href="https://github.com/wSoltani" 
            target="_blank" 
            rel="noopener noreferrer" 
            class="hover:text-blue-600 flex items-center gap-2"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
            GitHub
          </a>
          <a 
            href="https://linkedin.com/in/wsoltani" 
            target="_blank" 
            rel="noopener noreferrer" 
            class="hover:text-blue-600 flex items-center gap-2"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/>
            </svg>
            LinkedIn
          </a>
        </div>
      </div>
    </footer>

    <script>
      // Mobile menu toggle
      const mobileMenuButton = document.getElementById('mobile-menu-button');
      const mobileMenu = document.getElementById('mobile-menu');
      const header = document.getElementById('header');

      if (mobileMenuButton && mobileMenu) {
        mobileMenuButton.addEventListener('click', () => {
          mobileMenu.classList.toggle('hidden');
        });

        // Close mobile menu when clicking outside
        document.addEventListener('click', (event) => {
          const target = event.target as Node;
          if (target && !mobileMenuButton.contains(target) && !mobileMenu.contains(target)) {
            mobileMenu.classList.add('hidden');
          }
        });
      }

      // Add shadow to header on scroll
      if (header) {
        window.addEventListener('scroll', () => {
          if (window.scrollY > 0) {
            header.classList.add('shadow-sm', 'dark:shadow-gray-800/50');
          } else {
            header.classList.remove('shadow-sm', 'dark:shadow-gray-800/50');
          }
        });
      }
    </script>
  </body>
</html>

<style is:global>
  :root {
    --astro-code-color-text: #ffffff;
    --astro-code-color-background: #1e1e1e;
    --astro-code-token-constant: #79b8ff;
    --astro-code-token-string: #ffa657;
    --astro-code-token-comment: #6a737d;
    --astro-code-token-keyword: #f97583;
    --astro-code-token-parameter: #ffa657;
    --astro-code-token-function: #b392f0;
    --astro-code-token-string-expression: #9ecbff;
    --astro-code-token-punctuation: #bbbbbb;
  }
</style>